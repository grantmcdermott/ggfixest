[{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 ggiplot authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Grant McDermott. Author, maintainer.","code":""},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McDermott G (2022). ggiplot: ggplot2 Equivalents fixest::iplot(). https://github.com/grantmcdermott/ggiplot, http://grantmcdermott.com/ggiplot.","code":"@Manual{,   title = {ggiplot: ggplot2 Equivalents of fixest::iplot()},   author = {Grant McDermott},   year = {2022},   note = {https://github.com/grantmcdermott/ggiplot, http://grantmcdermott.com/ggiplot}, }"},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"ggiplot","dir":"","previous_headings":"","what":"ggplot2 Equivalents of fixest::iplot()","title":"ggplot2 Equivalents of fixest::iplot()","text":"package provides ggplot2 equivalent base fixest::iplot() function. Installation | Examples | License","code":""},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ggplot2 Equivalents of fixest::iplot()","text":"Install GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"grantmcdermott/ggiplot\")"},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"ggplot2 Equivalents of fixest::iplot()","text":"follow examples draw fixest introductory vignette, well iplot() help documentation. ’ll see, package essentially consists single function — ggiplot() — tries closely mimic base compatriot. However, leveraging ggplot2 API infrastructure, also offers additional functionality. Start loading ggiplot package alongside fixest.","code":"library(ggiplot) library(fixest)"},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"example-1-vanilla-twfe","dir":"","previous_headings":"Examples","what":"Example 1: Vanilla TWFE","title":"ggplot2 Equivalents of fixest::iplot()","text":"Let’s compare (base) iplot ggiplot default plots.   small differences, certainly producing basic plot. get even closer original, specify use errorbar(s) rather (ggiplot’s default ) pointrange(s).  Many arguments iplot() carry ggiplot() . deliberate, since want reduce cognitive overhead switching two plotting methods. example, can join points using pt.join = TRUE argument.   ggiplot defaults slightly different cases, may require less arguments depending want . example,    Unlike iplot(), multiple confidence interval levels supported.","code":"data(base_did) base_inter = base_did  est_did = feols(y ~ x1 + i(period, treat, 5) | id+period, base_inter) iplot(est_did) ggiplot(est_did) ggiplot(est_did, geom = 'errorbar') iplot(est_did, pt.join = TRUE) ggiplot(est_did, pt.join = TRUE, geom_style = 'errorbar') # iplot(est_did, pt.join = TRUE, ci.lty = 0, ci.width = 0, ci.fill = TRUE) iplot(est_did, pt.join = TRUE, ci.lty = 0, ci.width = 0, ci.fill = TRUE,       ci.fill.par = list(col = 'black', alpha = 0.4)) ggiplot(est_did, geom_style = 'ribbon') ggiplot(est_did, geom_style = 'ribbon', pt.pch = NA, col = 'orange') #> Scale for 'colour' is already present. Adding another scale for 'colour', #> which will replace the existing scale. ggiplot(est_did, ci_level = c(.8, .95))"},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"example-2-multiple-estimation-i","dir":"","previous_headings":"Examples","what":"Example 2: Multiple estimation (i)","title":"ggplot2 Equivalents of fixest::iplot()","text":"’ll demonstrate using staggered treatment example fixest introductory vignette. , comparison, base iplot original. Note add legend manually.  ’s ggiplot version.  don’t name list models defaults something sensible.  One nice thing ggplot2 API makes changing multiplot figures simple. example, don’t like presentation “dodged” models single frame, ’s easy facet instead using multi_style = 'facet' argument.","code":"data(base_stagg) est_twfe = feols(y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) |                                      id + year, base_stagg) est_sa20 = feols(y ~ x1 + sunab(year_treated, year) |                                      id + year, base_stagg) iplot(list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),       main = 'Staggered treatment', ref.line = -1, pt.join = TRUE) legend('topleft', col = c(1, 2), pch = c(20, 17),               legend = c('TWFE', 'Sun & Abraham (2020)')) ggiplot(list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),         main = 'Staggered treatment', ref.line = -1, pt.join = TRUE) ggiplot(list(est_twfe, est_sa20),         main = 'Staggered treatment', ref.line = -1, pt.join = TRUE) ggiplot(list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),         main = 'Staggered treatment', ref.line = -1, pt.join = TRUE,         multi_style = 'facet')"},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"example-3-multiple-estimation-ii","dir":"","previous_headings":"Examples","what":"Example 3: Multiple estimation (ii)","title":"ggplot2 Equivalents of fixest::iplot()","text":"area ggiplot shines complex multiple estimation cases, lists fixest_multi objects. illustrate, let’s add split variable (group) staggered dataset. Now re-run two regressions earlier, splitting sample generate fixest_multi objects. iplot ggiplot fine single fixest_multi object (although remember manually add legend former)   However, iplot complains combine list several fixest_multi objects. contrast, ggiplot works…  … even better use faceting instead dodged errorbars. Let’s use opportunity construct fancy plot invokes additional arguments ggplot theming.","code":"base_stagg_grp = base_stagg base_stagg_grp$grp = ifelse(base_stagg_grp$id %% 2 == 0, 'Evens', 'Odds') est_twfe_grp = feols(y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) |                                              id + year, base_stagg_grp,                                           split = ~ grp) est_sa20_grp = feols(y ~ x1 + sunab(year_treated, year) |                                              id + year, base_stagg_grp,                                           split = ~ grp) iplot(est_twfe_grp, ref.line = -1, main = 'Staggered treatment: TWFE') legend('topleft', col = c(1, 2), pch = c(20, 17),               legend = c('Evens', 'Odds')) ggiplot(est_twfe_grp, ref.line = -1, main = 'Staggered treatment: TWFE') iplot(list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),       ref.line = -1, main = 'Staggered treatment: Split mutli-sample') #> Error in coefplot_prms(object = object, ..., sd = sd, ci_low = ci_low, : The first element of 'object' raises and error: #> Error in nb * sd : non-numeric argument to binary operator ggiplot(list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),         ref.line = -1, main = 'Staggered treatment: Split mutli-sample') ggiplot(list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),         ref.line = -1,         main = 'Staggered treatment: Split mutli-sample',         xlab = 'Time to treatment',         multi_style = 'facet',         geom_style = 'ribbon',         theme = theme_minimal() +            theme(text = element_text(family = 'HersheySans'),                  plot.title = element_text(hjust = 0.5),                  legend.position = 'none'))"},{"path":[]},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"on-theming-and-scale-adjustments","dir":"","previous_headings":"Examples > Asides","what":"On theming and scale adjustments","title":"ggplot2 Equivalents of fixest::iplot()","text":"Setting theme inside ggiplot() call optional strictly necessary, since ggplot2 API allows programmatic updating existing plots. E.g.   etc.","code":"last_plot() + labs(caption = 'Note: Super fancy plot brought to you by ggiplot') last_plot() +      theme_grey() +      theme(legend.position = 'none') +     scale_colour_brewer(palette = 'Set1', aesthetics = c('colour', 'fill')) #> Scale for 'colour' is already present. Adding another scale for 'colour', #> which will replace the existing scale."},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"on-dictionaries","dir":"","previous_headings":"Examples > Asides","what":"On dictionaries","title":"ggplot2 Equivalents of fixest::iplot()","text":"Dictionaries work similarly iplot. Simple example:  can either set dictionary directly plot call…  … , set globally using setFixest_dict() macro.","code":"base_inter$letter = letters[base_inter$period] est_letters = feols(y ~ x1 + i(letter, treat, 'e') | id+letter, base_inter)  # Dictionary for capitalising the letters dict = LETTERS[1:10]; names(dict) = letters[1:10]  ggiplot(est_letters) # No dictionary ggiplot(est_letters, dict = dict) setFixest_dict(dict) ggiplot(est_letters) setFixest_dict() # reset"},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"ggplot2 Equivalents of fixest::iplot()","text":"material repository made available MIT license.","code":""},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/reference/ggiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplots confidence intervals and point estimates — ggiplot","title":"ggplots confidence intervals and point estimates — ggiplot","text":"Plots ggplot2 equivalent fixest::iplot(). Many arguments . per latter's description: function plots results estimations (coefficients confidence intervals). function restricts output variables created , either interactions factors raw factors.","code":""},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/reference/ggiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplots confidence intervals and point estimates — ggiplot","text":"","code":"ggiplot(   object,   geom_style = c(\"pointrange\", \"errorbar\", \"ribbon\"),   multi_style = c(\"dodge\", \"facet\"),   facet_args = NULL,   theme = NULL,   ... )"},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/reference/ggiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplots confidence intervals and point estimates — ggiplot","text":"object model object class fixest fixest_multi, list thereof. geom_style Character string. One c('pointrange', 'errorbar', 'ribbon') describing preferred geometric representation coefficients. multi_style Character string. One c('dodge', 'facet'), defining multi-model objects presented. facet_args list arguments passed ggplot::fact_wrap(). E.g. facet_args = list(ncol = 2, scales = 'free_y'). used multi_style = 'facet'. theme ggplot2 theme. Defaults theme_linedraw() minor adjustments, centered plot title. Can also defined existing ggiplot object redefine theme elements. See examples. ... Arguments passed , equivalent, corresponding fixest::iplot() arguments. Currently used : main, xlab, ylab setting plot title, x- y-axis labels, respectively. zero zero.par defining adjusting zero line. ref.line ref.line.par defining adjusting vertical reference line. pt.pch pt.join overriding default point estimate shapes joining , respectively. col manually defining line, point, ribbon colours. ci_level changing desired confidence level (default = 0.95). dict dictionary overriding coefficient names.","code":""},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/reference/ggiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplots confidence intervals and point estimates — ggiplot","text":"ggplot2 object.","code":""},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/reference/ggiplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ggplots confidence intervals and point estimates — ggiplot","text":"function generally tries mimic functionality (appropriate) arguments fixest::iplot() closely possible. However, leveraging ggplot2 API infrastructure, able support complex plot arrangements ---box difficult achieve using base iplot() alternative.","code":""},{"path":[]},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/reference/ggiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplots confidence intervals and point estimates — ggiplot","text":"","code":"# We'll also load fixest to estimate the actual models that we're plottig. library(fixest) library(ggiplot)  # These examples borrow from the fixest::iplot() documentation and the # introductory package vignette.  # ## Example 1: Vanilla TWFE #  data(base_did) base_inter = base_did  est_did = feols(y ~ x1 + i(period, treat, 5) | id+period, base_inter) ggiplot(est_did)   # Comparison with iplot defaults iplot(est_did)  ggiplot(est_did, geom = 'errorbar') # closer iplot original   # Many of the arguments work the same as in iplot() iplot(est_did, pt.join = TRUE)  ggiplot(est_did, pt.join = TRUE, geom_style = 'errorbar')   # Plots can be customized and tweaked easily ggiplot(est_did, geom_style = 'ribbon')  ggiplot(est_did, geom_style = 'ribbon', col = 'orange') #> Scale for 'colour' is already present. Adding another scale for 'colour', #> which will replace the existing scale.   # # Example 2: Multiple estimation (i) #  # We'll demonstrate using the staggered treatment example from the # introductory fixest vignette.  data(base_stagg) est_twfe = feols(y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) | id + year, base_stagg) est_sa20 = feols(y ~ x1 + sunab(year_treated, year) | id + year, base_stagg)  ggiplot(list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),         main = 'Staggered treatment', ref.line = -1, pt.join = TRUE)   # If you don't like the presentation of 'dodged' models in a single frame, # then it easy to facet them instead using multi_style = 'facet'. ggiplot(list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),         main = 'Staggered treatment', ref.line = -1, pt.join = TRUE,         multi_style = 'facet')   # # Example 3: Multiple estimation (ii) #  # An area where ggiplot shines is in complex multiple estimation cases, such # as lists of fixest_multi objects. To illustrate, let's add a split variable # (group) to our staggered dataset. base_stagg_grp = base_stagg base_stagg_grp$grp = ifelse(base_stagg_grp$id %% 2 == 0, 'Evens', 'Odds')  # Now re-run our two regressions from earlier, but splitting the sample to # generate fixest_multi objects. est_twfe_grp = feols(y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) |                      id + year, base_stagg_grp, split = ~ grp) est_sa20_grp = feols(y ~ x1 + sunab(year_treated, year) |                      id + year, base_stagg_grp, split = ~ grp)  # ggiplot combines with list of multi-estimation objects without a problem... ggiplot(list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),         ref.line = -1, main = 'Staggered treatment: Split multi-sample')   # ... but is even better when we use faceting instead of dodged errorbars. # Let's use this an opportunity to construct a fancy plot that invokes some # additional arguments and ggplot theming. ggiplot(list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),         ref.line = -1,         main = 'Staggered treatment: Split multi-sample',         xlab = 'Time to treatment',         multi_style = 'facet',         geom_style = 'ribbon',         theme = theme_minimal() +            theme(text = element_text(family = 'HersheySans'),                  plot.title = element_text(hjust = 0.5),                  legend.position = 'none'))   # # Aside on theming and scale adjustments #  # Setting the theme inside the `ggiplot()` call is optional and not strictly # necessary, since the ggplot2 API allows programmatic updating of existing # plots. E.g. last_plot() + labs(caption = 'Note: Super fancy plot brought to you by ggiplot')  last_plot() + theme_void() + scale_colour_brewer(palette = 'Set1') #> Scale for 'colour' is already present. Adding another scale for 'colour', #> which will replace the existing scale.  # etc.  # # Aside on dictionaries #  # Dictionaries work similarly to iplot. Simple example:  base_inter$letter = letters[base_inter$period] est_letters = feols(y ~ x1 + i(letter, treat, 'e') | id+letter, base_inter)  ggiplot(est_letters) # No dictionary   # Dictionary for capitalising the letters dict = LETTERS[1:10]; names(dict) = letters[1:10]  # You can either set the dictionary directly in the plot call. ggiplot(est_letters, dict=dict)   # Or, set it globally using the setFixest_dict macro setFixest_dict(dict) ggiplot(est_letters)   setFixest_dict() # reset"},{"path":"http://grantmcdermott.com/ggiplot, https://github.com/grantmcdermott/ggiplot/news/index.html","id":"ggiplot-001","dir":"Changelog","previous_headings":"","what":"ggiplot 0.0.1","title":"ggiplot 0.0.1","text":"Support multiple confidence levels (#2) Support multiple LHS variables (#1) Added NEWS.md file track changes package.","code":""}]
