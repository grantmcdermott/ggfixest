[{"path":"http://grantmcdermott.com/ggiplot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 ggiplot authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://grantmcdermott.com/ggiplot/articles/ggiplot.html","id":"example-1-vanilla-twfe","dir":"Articles","previous_headings":"","what":"Example 1: Vanilla TWFE","title":"Comparing ggiplot with fixest::iplot","text":"Let’s compare (base) iplot ggiplot default plots.   small differences, certainly producing basic plot. get even closer original, specify use errorbar(s) rather (ggiplot’s default ) pointrange(s).  Many arguments iplot() carry ggiplot() . deliberate, since want reduce cognitive overhead switching two plotting methods. example, can join points using pt.join = TRUE argument.   ggiplot defaults slightly different cases, may require less arguments depending want . example,    Unlike base iplot, multiple confidence interval levels supported. works ribbons .  Another new feature (.e. unsupported base iplot) adding aggregated post- /pre-treatment effects plots. ’s example builds previous plot, adding mean post-treatment effect.","code":"data(base_did)  est_did = feols(y ~ x1 + i(period, treat, 5) | id + period, base_did) iplot(est_did) ggiplot(est_did) ggiplot(est_did, geom = 'errorbar') iplot(est_did, pt.join = TRUE) ggiplot(est_did, pt.join = TRUE, geom_style = 'errorbar') # iplot(est_did, pt.join = TRUE, ci.lty = 0, ci.width = 0, ci.fill = TRUE) iplot(     est_did, pt.join = TRUE, ci.lty = 0, ci.width = 0, ci.fill = TRUE,     ci.fill.par = list(col = 'black', alpha = 0.3)     ) ggiplot(est_did, geom_style = 'ribbon') ggiplot(est_did, geom_style = 'ribbon', pt.pch = NA, col = 'orange') #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale. ggiplot(est_did, ci_level = c(.8, .95)) ggiplot(     est_did, ci_level = c(.8, .95),     aggr_eff = \"post\", aggr_eff.par = list(col = \"orange\") # default col is grey     )"},{"path":"http://grantmcdermott.com/ggiplot/articles/ggiplot.html","id":"example-2-multiple-estimation-i","dir":"Articles","previous_headings":"","what":"Example 2: Multiple estimation (i)","title":"Comparing ggiplot with fixest::iplot","text":"’ll demonstrate multiple estimation functionality using staggered treatment example (comparing vanilla TWFE Sun-Abraham estimator) fixest introductory vignette. , comparison, base iplot original. Note add legend manually.  ’s ggiplot version.  don’t name list models defaults something sensible.  One nice thing ggplot2 API makes changing multiplot figures simple. example, don’t like presentation “dodged” models single frame, ’s easy facet instead using multi_style = 'facet' argument.","code":"data(base_stagg)  est_twfe = feols(     y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) | id + year,     data = base_stagg     )  est_sa20 = feols(     y ~ x1 + sunab(year_treated, year) | id + year,     data = base_stagg     ) iplot(     list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),     main = 'Staggered treatment', ref.line = -1, pt.join = TRUE     ) legend(     'topleft', col = c(1, 2), pch = c(20, 17),     legend = c('TWFE', 'Sun & Abraham (2020)')     ) ggiplot(     list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),     main = 'Staggered treatment', ref.line = -1, pt.join = TRUE     ) ggiplot(     list(est_twfe, est_sa20),     main = 'Staggered treatment', ref.line = -1, pt.join = TRUE     ) ggiplot(     list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),     main = 'Staggered treatment', ref.line = -1, pt.join = TRUE,     multi_style = 'facet'     )"},{"path":"http://grantmcdermott.com/ggiplot/articles/ggiplot.html","id":"example-3-multiple-estimation-ii","dir":"Articles","previous_headings":"","what":"Example 3: Multiple estimation (ii)","title":"Comparing ggiplot with fixest::iplot","text":"area ggiplot shines complex multiple estimation cases, lists fixest_multi objects. illustrate, let’s add split variable (group) staggered dataset. Now re-run two regressions earlier, splitting sample generate fixest_multi objects. iplot ggiplot fine single fixest_multi object (although remember manually add legend former)   However, iplot complains combine list several fixest_multi objects. contrast, ggiplot works…  … even better use faceting instead dodged errorbars. Let’s use opportunity construct fancy plot invokes additional arguments ggplot theming.","code":"base_stagg_grp = base_stagg base_stagg_grp$grp = ifelse(base_stagg_grp$id %% 2 == 0, 'Evens', 'Odds') est_twfe_grp = feols(     y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) | id + year,     data = base_stagg_grp, split = ~ grp     ) est_sa20_grp = feols(     y ~ x1 + sunab(year_treated, year) | id + year,     base_stagg_grp, split = ~ grp     ) iplot(est_twfe_grp, ref.line = -1, main = 'Staggered treatment: TWFE') legend('topleft', col = c(1, 2), pch = c(20, 17), legend = c('Evens', 'Odds')) ggiplot(est_twfe_grp, ref.line = -1, main = 'Staggered treatment: TWFE') iplot(     list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),     ref.line = -1, main = 'Staggered treatment: Split mutli-sample'     ) #> Error in coefplot_prms(object = object, ..., sd = sd, ci_low = ci_low, : The first element of 'object' raises and error: #> Error in nb * sd : non-numeric argument to binary operator ggiplot(     list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),     ref.line = -1, main = 'Staggered treatment: Split mutli-sample'     ) ggiplot(     list(\"TWFE\" = est_twfe_grp, \"Sun & Abraham (2020)\" = est_sa20_grp),     ref.line = -1,     main = \"Staggered treatment: Split mutli-sample\",     xlab = \"Time to treatment\",     multi_style = \"facet\",     geom_style = \"ribbon\",     facet_args = list(labeller = labeller(id = \\(x) gsub(\".*: \", \"\", x))),     theme = theme_minimal() +         theme(             text = element_text(family = \"HersheySans\"),             plot.title = element_text(hjust = 0.5),             legend.position = \"none\"         ) )"},{"path":[]},{"path":"http://grantmcdermott.com/ggiplot/articles/ggiplot.html","id":"on-theming-and-scale-adjustments","dir":"Articles","previous_headings":"Asides","what":"On theming and scale adjustments","title":"Comparing ggiplot with fixest::iplot","text":"Setting theme inside ggiplot() call optional strictly necessary, since ggplot2 API allows programmatic updating existing plots. E.g.   etc.","code":"last_plot() +     labs(caption = 'Note: Super fancy plot brought to you by ggiplot') last_plot() +      theme_grey() +      theme(legend.position = 'none') +     scale_colour_brewer(palette = 'Set1', aesthetics = c('colour', 'fill')) #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale."},{"path":"http://grantmcdermott.com/ggiplot/articles/ggiplot.html","id":"on-dictionaries","dir":"Articles","previous_headings":"Asides","what":"On dictionaries","title":"Comparing ggiplot with fixest::iplot","text":"Dictionaries work similarly iplot. Simple example:  can either set dictionary directly plot call…  … , set globally using setFixest_dict() macro.","code":"base_did$letter = letters[base_did$period] est_letters = feols(y ~ x1 + i(letter, treat, 'e') | id+letter, base_did)  # Dictionary for capitalising the letters dict = LETTERS[1:10]; names(dict) = letters[1:10]  ggiplot(est_letters) # No dictionary ggiplot(est_letters, dict = dict) setFixest_dict(dict) ggiplot(est_letters) setFixest_dict() # reset"},{"path":"http://grantmcdermott.com/ggiplot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Grant McDermott. Author, maintainer.","code":""},{"path":"http://grantmcdermott.com/ggiplot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McDermott G (2023). ggiplot: ggplot2 Equivalents fixest::iplot(). R package version 0.0.1.9009, http://grantmcdermott.com/ggiplot/.","code":"@Manual{,   title = {ggiplot: ggplot2 Equivalents of fixest::iplot()},   author = {Grant McDermott},   year = {2023},   note = {R package version 0.0.1.9009},   url = {http://grantmcdermott.com/ggiplot/}, }"},{"path":"http://grantmcdermott.com/ggiplot/index.html","id":"ggiplot","dir":"","previous_headings":"","what":"ggplot2 Equivalents of fixest::iplot()","title":"ggplot2 Equivalents of fixest::iplot()","text":"package provides ggplot2 equivalent base fixest::iplot() function. goal ggiplot produce nice event study plots minimal effort, lots scope customization.","code":""},{"path":"http://grantmcdermott.com/ggiplot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ggplot2 Equivalents of fixest::iplot()","text":"package yet CRAN, can installed R-universe:","code":"install.packages(\"ggiplot\", repos = \"https://grantmcdermott.r-universe.dev\")"},{"path":"http://grantmcdermott.com/ggiplot/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"ggplot2 Equivalents of fixest::iplot()","text":"detailed introductory vignette many examples provided package homepage (, typing vignette(\"ggiplot\") R console). quickstart examples whet appetite. First, basic event study plot.  plot call output look familiar regular fixest users. note ggiplot() supports several features available base iplot() version. example, plotting multiple confidence intervals aggregate treatments effects.  can get quite fancy, combining lists complex multiple estimation objects custom themes, .","code":"library(ggiplot) library(fixest)  est_did = feols(y ~ x1 + i(period, treat, 5) | id+period, base_did)  # iplot(est_did) ## base version ggiplot(est_did) ## this package ggiplot(     est_did,     ci_level = c(.8, .95),     aggr_eff = \"post\", aggr_eff.par = list(col = \"orange\") ) base_stagg_grp = base_stagg base_stagg_grp$grp = ifelse(base_stagg_grp$id %% 2 == 0, 'Evens', 'Odds')  est_twfe_grp = feols(     y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) | id + year,     data = base_stagg_grp, split = ~grp )  est_sa20_grp = feols(     y ~ x1 + sunab(year_treated, year) | id + year,     data = base_stagg_grp, split = ~grp )  ggiplot(     list(\"TWFE\" = est_twfe_grp, \"Sun & Abraham (2020)\" = est_sa20_grp),     ref.line = -1,     main = \"Staggered treatment: Split mutli-sample\",     xlab = \"Time to treatment\",     multi_style = \"facet\",     geom_style = \"ribbon\",     facet_args = list(labeller = labeller(id = \\(x) gsub(\".*: \", \"\", x))),     theme = theme_minimal() +         theme(             text = element_text(family = \"HersheySans\"),             plot.title = element_text(hjust = 0.5),             legend.position = \"none\"         ) )"},{"path":"http://grantmcdermott.com/ggiplot/reference/aggr_es.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregates event-study treatment effects. — aggr_es","title":"Aggregates event-study treatment effects. — aggr_es","text":"Aggregates post- (/pre-) treatment effects \"event-study\" estimation, also known dynamic difference--differences (DDiD) model. event-study estimated using fixest package, provides specialised () operator class models. default, function return average post-treatment effect (.e. across multiple periods). However, can also return cumulative post-treatment effect can used aggregate pre-treatment effects . heart, aggr_es() convenience wrapper around marginaleffects::hypotheses(), used perform underlying joint hypothesis test.","code":""},{"path":"http://grantmcdermott.com/ggiplot/reference/aggr_es.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregates event-study treatment effects. — aggr_es","text":"","code":"aggr_es(   object,   rhs = 0,   period = c(\"post\", \"pre\", \"both\"),   aggregation = c(\"mean\", \"cumulative\"),   abbr_term = TRUE,   ... )"},{"path":"http://grantmcdermott.com/ggiplot/reference/aggr_es.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregates event-study treatment effects. — aggr_es","text":"object model object class fixest, () operator used facilitate \"event-study\" design. See Examples. rhs Numeric. null hypothesis value. Defaults 0. period Character string. group periods aggregating? One \"post\" (default), \"prep\", \"\". aggregation Character string. aggregation type. Either \"mean\" (default) \"cumulative\". abbr_term Logical. leading \"term\" column return data frame abbreviated? default TRUE. FALSE, term column retain full hypothesis test string per usual marginaleffects(). Note information retained attribute return object, regardless. ... Additional arguments passed marginaleffects::hypotheses().","code":""},{"path":"http://grantmcdermott.com/ggiplot/reference/aggr_es.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregates event-study treatment effects. — aggr_es","text":"\"tidy\" data frame aggregated (pre /post) treatment effects, plus inferential information standard errors, confidence intervals, etc. Potentially useful information underlying hypothesis test also provided attribute. See Examples.","code":""},{"path":[]},{"path":"http://grantmcdermott.com/ggiplot/reference/aggr_es.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregates event-study treatment effects. — aggr_es","text":"","code":"library(fixest)  est = feols(y ~ x1 + i(period, treat, 5) | id + period, base_did)  # Default hypothesis test is a null mean post-treatment effect (post_mean = aggr_es(est)) #>                     term estimate std.error statistic      p.value s.value #> 1: post-treatment (mean) 3.906554 0.8598576  4.543257 5.539159e-06 17.4619 #>    conf.low conf.high #> 1: 2.221264  5.591844 # The underlying hypothesis is saved as an attribute attributes(post_mean)[\"hypothesis\"] #> $<NA> #> NULL #>   # Other hypothesis and aggregation options aggr_es(est, aggregation = \"cumulative\") #>                           term estimate std.error statistic      p.value #> 1: post-treatment (cumulative) 19.53277  4.299288  4.543257 5.539158e-06 #>    s.value conf.low conf.high #> 1: 17.4619 11.10632  27.95922 aggr_es(est, period = \"both\") #>                     term  estimate std.error statistic      p.value   s.value #> 1:  pre-treatment (mean) -1.179871 0.8561964 -1.378037 1.681917e-01  2.571821 #> 2: post-treatment (mean)  3.906554 0.8598576  4.543257 5.539159e-06 17.461902 #>     conf.low conf.high #> 1: -2.857985 0.4982434 #> 2:  2.221264 5.5918440 aggr_es(est, rhs = -1, period = \"pre\") #>                    term   estimate std.error  statistic   p.value   s.value #> 1: pre-treatment (mean) -0.1798707 0.8561964 -0.2100811 0.8336044 0.2625653 #>     conf.low conf.high #> 1: -1.857985  1.498243 # Etc."},{"path":"http://grantmcdermott.com/ggiplot/reference/ggiplot.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplots confidence intervals and point estimates — ggiplot","title":"ggplots confidence intervals and point estimates — ggiplot","text":"Plots ggplot2 equivalent fixest::iplot(). Many arguments . per latter's description: function plots results estimations (coefficients confidence intervals). function restricts output variables created , either interactions factors raw factors.","code":""},{"path":"http://grantmcdermott.com/ggiplot/reference/ggiplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplots confidence intervals and point estimates — ggiplot","text":"","code":"ggiplot(   object,   geom_style = c(\"pointrange\", \"errorbar\", \"ribbon\"),   multi_style = c(\"dodge\", \"facet\"),   aggr_eff = c(\"none\", \"post\", \"pre\", \"both\"),   aggr_eff.par = list(col = \"grey50\", lwd = 1, lty = 1),   facet_args = NULL,   theme = NULL,   ... )"},{"path":"http://grantmcdermott.com/ggiplot/reference/ggiplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplots confidence intervals and point estimates — ggiplot","text":"object model object class fixest fixest_multi, list thereof. geom_style Character string. One c('pointrange', 'errorbar', 'ribbon') describing preferred geometric representation coefficients. multi_style Character string. One c('dodge', 'facet'), defining multi-model objects presented. aggr_eff character string indicating whether aggregated mean post- (/pre-) treatment effect plotted alongside individual period effects. one \"none\" (default), \"post\", \"pre\", \"\". aggr_eff.par List. Parameters aggregated treatment effect line, plotted. default values col = 'gray50', lwd = 1, lty = 1. facet_args list arguments passed ggplot::fact_wrap(). E.g. facet_args = list(ncol = 2, scales = 'free_y'). used multi_style = 'facet'. theme ggplot2 theme. Defaults theme_linedraw() minor adjustments, centered plot title. Can also defined existing ggiplot object redefine theme elements. See examples. ... Arguments passed , equivalent, corresponding fixest::iplot() arguments. Note require list objects. Currently used : keep drop subsetting variables using regular expressions. main, xlab, ylab setting plot title, x- y-axis labels, respectively. zero zero.par defining adjusting zero line. example, zero.par = list(col = 'orange'). ref.line ref.line.par defining adjusting vertical reference line. example, ref.line.par = list(col = 'red', lty = 4). pt.pch pt.join overriding default point estimate shapes joining , respectively. col manually defining line, point, ribbon colours. ci_level changing desired confidence level (default = 0.95). Note multiple levels allowed, e.g. ci_level = c(0.8, 0.95). ci.width changing width extremities confidence intervals. used geom_style = \"errorbar\" (multiple CI levels requested default pointrange style). default value 0.2. ci.fill.par changing confidence interval fill. used geom_style = \"ribbon\" currently affects alpha (transparency) channel. example, can make CI band lighter ci.fill.par = list(alpha = 0.2) (default alpha 0.3). dict dictionary overriding coefficient names.","code":""},{"path":"http://grantmcdermott.com/ggiplot/reference/ggiplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplots confidence intervals and point estimates — ggiplot","text":"ggplot2 object.","code":""},{"path":"http://grantmcdermott.com/ggiplot/reference/ggiplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ggplots confidence intervals and point estimates — ggiplot","text":"function generally tries mimic functionality (appropriate) arguments fixest::iplot() closely possible. However, leveraging ggplot2 API infrastructure, able support complex plot arrangements ---box difficult achieve using base iplot() alternative.","code":""},{"path":[]},{"path":"http://grantmcdermott.com/ggiplot/reference/ggiplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplots confidence intervals and point estimates — ggiplot","text":"","code":"# We'll also load fixest to estimate the actual models that we're plottig. library(fixest) library(ggiplot)  # These examples borrow from the fixest::iplot() documentation and the # introductory package vignette.  # ## Example 1: Vanilla TWFE #  data(base_did) base_inter = base_did  est_did = feols(y ~ x1 + i(period, treat, 5) | id+period, base_inter) ggiplot(est_did)   # Comparison with iplot defaults iplot(est_did)  ggiplot(est_did, geom = 'errorbar') # closer iplot original   # Many of the arguments work the same as in iplot() iplot(est_did, pt.join = TRUE)  ggiplot(est_did, pt.join = TRUE, geom_style = 'errorbar')   # Plots can be customized and tweaked easily ggiplot(est_did, geom_style = 'ribbon')  ggiplot(est_did, geom_style = 'ribbon', col = 'orange') #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # Unlike base iplot, multiple confidence interval levels are supported ggiplot(est_did, ci_level = c(.8, .95))   # Another new feature (i.e. unsupported in base iplot) is adding aggregated # post- and/or pre-treatment effects to your plots. Here's an example that # builds on the previous plot, by adding the mean post-treatment effect. ggiplot(est_did, ci_level = c(.8, .95),         aggr_eff = \"post\", aggr_eff.par = list(col=\"orange\")) # default is grey   # # Example 2: Multiple estimation (i) #  # We'll demonstrate using the staggered treatment example from the # introductory fixest vignette.  data(base_stagg) est_twfe = feols(y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) | id + year, base_stagg) est_sa20 = feols(y ~ x1 + sunab(year_treated, year) | id + year, base_stagg)  ggiplot(list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),         main = 'Staggered treatment', ref.line = -1, pt.join = TRUE)   # If you don't like the presentation of 'dodged' models in a single frame, # then it easy to facet them instead using multi_style = 'facet'. ggiplot(list('TWFE' = est_twfe, 'Sun & Abraham (2020)' = est_sa20),         main = 'Staggered treatment', ref.line = -1, pt.join = TRUE,         multi_style = 'facet')   # # Example 3: Multiple estimation (ii) #  # An area where ggiplot shines is in complex multiple estimation cases, such # as lists of fixest_multi objects. To illustrate, let's add a split variable # (group) to our staggered dataset. base_stagg_grp = base_stagg base_stagg_grp$grp = ifelse(base_stagg_grp$id %% 2 == 0, 'Evens', 'Odds')  # Now re-run our two regressions from earlier, but splitting the sample to # generate fixest_multi objects. est_twfe_grp = feols(y ~ x1 + i(time_to_treatment, treated, ref = c(-1, -1000)) |                      id + year, base_stagg_grp, split = ~ grp) est_sa20_grp = feols(y ~ x1 + sunab(year_treated, year) |                      id + year, base_stagg_grp, split = ~ grp)  # ggiplot combines with list of multi-estimation objects without a problem... ggiplot(list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),         ref.line = -1, main = 'Staggered treatment: Split multi-sample')   # ... but is even better when we use faceting instead of dodged errorbars. # Let's use this an opportunity to construct a fancy plot that invokes some # additional arguments and ggplot theming. ggiplot(list('TWFE' = est_twfe_grp, 'Sun & Abraham (2020)' = est_sa20_grp),         ref.line = -1,         main = 'Staggered treatment: Split multi-sample',         xlab = 'Time to treatment',         multi_style = 'facet',         geom_style = 'ribbon',         theme = theme_minimal() +            theme(text = element_text(family = 'HersheySans'),                  plot.title = element_text(hjust = 0.5),                  legend.position = 'none'))   # # Aside on theming and scale adjustments #  # Setting the theme inside the `ggiplot()` call is optional and not strictly # necessary, since the ggplot2 API allows programmatic updating of existing # plots. E.g. last_plot() + labs(caption = 'Note: Super fancy plot brought to you by ggiplot')  last_plot() + theme_void() + scale_colour_brewer(palette = 'Set1') #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.  # etc.  # # Aside on dictionaries #  # Dictionaries work similarly to iplot. Simple example:  base_inter$letter = letters[base_inter$period] est_letters = feols(y ~ x1 + i(letter, treat, 'e') | id+letter, base_inter)  ggiplot(est_letters) # No dictionary   # Dictionary for capitalising the letters dict = LETTERS[1:10]; names(dict) = letters[1:10]  # You can either set the dictionary directly in the plot call. ggiplot(est_letters, dict=dict)   # Or, set it globally using the setFixest_dict macro setFixest_dict(dict) ggiplot(est_letters)   setFixest_dict() # reset"},{"path":"http://grantmcdermott.com/ggiplot/reference/iplot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for grabbing and preparing iplot data — iplot_data","title":"Internal function for grabbing and preparing iplot data — iplot_data","text":"Grabs underlying data used construct fixest::iplot, added functionality tweaks ggiplot equivalents.","code":""},{"path":"http://grantmcdermott.com/ggiplot/reference/iplot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for grabbing and preparing iplot data — iplot_data","text":"","code":"iplot_data(   object,   .ci_level = 0.95,   .keep = NULL,   .drop = NULL,   .dict = fixest::getFixest_dict(),   .aggr_es = c(\"none\", \"post\", \"pre\", \"both\") )"},{"path":"http://grantmcdermott.com/ggiplot/reference/iplot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function for grabbing and preparing iplot data — iplot_data","text":"object model object class fixest fixest_multi, () operator used construct interaction, set interactions. .ci_level number 0 1 indicating desired confidence level, Defaults 0.95. .keep Character vector used subset coefficients interest. Passed fixest::iplot(..., keep = .keep) take form acceptable regular expression. .drop Character vector used subset coefficients interest (complement .keep). Passed fixest::iplot(..., drop = .drop) take form acceptable regular expression. .dict dictionary (.e. named character vector logical scalar). Used changing coefficient names. Defaults values getFixest_dict(). See ?fixest::iplot documentation information. .aggr_es character string indicating whether aggregated mean post- (/pre-) treatment effect added column returned data frame. Passed aggr_es(..., aggregation = \"mean\") one \"none\" (default), \"post\", \"pre\", \"\".","code":""},{"path":"http://grantmcdermott.com/ggiplot/reference/iplot_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function for grabbing and preparing iplot data — iplot_data","text":"data frame consisting estimate values, confidence intervals, relative x-axis positions, aesthetic information needed draw ggplot2 object.","code":""},{"path":"http://grantmcdermott.com/ggiplot/reference/iplot_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal function for grabbing and preparing iplot data — iplot_data","text":"function wrapper around fixest::iplot(..., .params = TRUE), various checks tweaks better facilitate plotting ggplot2 handling complex object types (e.g. lists fixest_multi models)","code":""},{"path":[]},{"path":"http://grantmcdermott.com/ggiplot/reference/iplot_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal function for grabbing and preparing iplot data — iplot_data","text":"","code":"library(fixest)  est_did = feols(y ~ x1 + i(period, treat, 5) | id+period,                 data = base_did) iplot(est_did, only.params = TRUE) # The \"base\" version #> $prms #>     estimate    ci_low   ci_high estimate_names estimate_names_raw is_ref  x id #> 1  -1.403045 -3.579128 0.7730371              1    period::1:treat  FALSE  1  1 #> 2  -1.247511 -3.390035 0.8950132              2    period::2:treat  FALSE  2  1 #> 3  -0.273206 -2.442759 1.8963469              3    period::3:treat  FALSE  3  1 #> 4  -1.795721 -3.928110 0.3366688              4    period::4:treat  FALSE  4  1 #> 5   0.000000  0.000000 0.0000000              5    period::5:treat   TRUE  5  1 #> 6   0.784452 -1.231152 2.8000556              6    period::6:treat  FALSE  6  1 #> 7   3.598897  1.439873 5.7579220              7    period::7:treat  FALSE  7  1 #> 8   3.811766  1.366707 6.2568251              8    period::8:treat  FALSE  8  1 #> 9   4.731426  2.581125 6.8817275              9    period::9:treat  FALSE  9  1 #> 10  6.606229  4.410100 8.8023573             10   period::10:treat  FALSE 10  1 #>            y #> 1  -1.403045 #> 2  -1.247511 #> 3  -0.273206 #> 4  -1.795721 #> 5   0.000000 #> 6   0.784452 #> 7   3.598897 #> 8   3.811766 #> 9   4.731426 #> 10  6.606229 #>  #> $is_iplot #> [1] TRUE #>  #> $at #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $labels #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  iplot_data(est_did)                # The wrapper provided by this package #>     estimate    ci_low   ci_high estimate_names estimate_names_raw is_ref  x id #> 1  -1.403045 -3.579128 0.7730371              1    period::1:treat  FALSE  1  1 #> 2  -1.247511 -3.390035 0.8950132              2    period::2:treat  FALSE  2  1 #> 3  -0.273206 -2.442759 1.8963469              3    period::3:treat  FALSE  3  1 #> 4  -1.795721 -3.928110 0.3366688              4    period::4:treat  FALSE  4  1 #> 5   0.000000  0.000000 0.0000000              5    period::5:treat   TRUE  5  1 #> 6   0.784452 -1.231152 2.8000556              6    period::6:treat  FALSE  6  1 #> 7   3.598897  1.439873 5.7579220              7    period::7:treat  FALSE  7  1 #> 8   3.811766  1.366707 6.2568251              8    period::8:treat  FALSE  8  1 #> 9   4.731426  2.581125 6.8817275              9    period::9:treat  FALSE  9  1 #> 10  6.606229  4.410100 8.8023573             10   period::10:treat  FALSE 10  1 #>            y lhs ci_level #> 1  -1.403045   y     0.95 #> 2  -1.247511   y     0.95 #> 3  -0.273206   y     0.95 #> 4  -1.795721   y     0.95 #> 5   0.000000   y     0.95 #> 6   0.784452   y     0.95 #> 7   3.598897   y     0.95 #> 8   3.811766   y     0.95 #> 9   4.731426   y     0.95 #> 10  6.606229   y     0.95  # Illustrative fixest_multi case, where the sample has been split by odd and # even ID numbers. est_split = feols(y ~ x1 + i(period, treat, 5) | id+period,                   data = base_did, split = ~id%%2) iplot(est_split, only.params = TRUE) # The \"base\" version #> $prms #>      estimate     ci_low    ci_high    x id estimate_names estimate_names_raw #> 1   1.4239576 -1.2422952  4.0902104  0.9  1              1    period::1:treat #> 2  -4.1291547 -7.3973098 -0.8609996  1.1  2              1    period::1:treat #> 3   1.6931989 -1.1310149  4.5174127  1.9  1              2    period::2:treat #> 4  -4.1353019 -7.2460773 -1.0245265  2.1  2              2    period::2:treat #> 5   3.0439521  0.3506812  5.7372230  2.9  1              3    period::3:treat #> 6  -3.4897091 -6.5504723 -0.4289459  3.1  2              3    period::3:treat #> 7  -0.8667871 -3.8315352  2.0979611  3.9  1              4    period::4:treat #> 8  -2.6458897 -5.7093088  0.4175294  4.1  2              4    period::4:treat #> 9   0.0000000  0.0000000  0.0000000  4.9  1              5    period::5:treat #> 10  0.0000000  0.0000000  0.0000000  5.1  2              5    period::5:treat #> 11  3.8181620  0.9644230  6.6719010  5.9  1              6    period::6:treat #> 12 -2.2626440 -4.9448774  0.4195895  6.1  2              6    period::6:treat #> 13  5.1642678  2.1084814  8.2200543  6.9  1              7    period::7:treat #> 14  2.0828305 -0.9816140  5.1472751  7.1  2              7    period::7:treat #> 15  5.2338735  2.0448159  8.4229311  7.9  1              8    period::8:treat #> 16  2.4826394 -1.2053985  6.1706773  8.1  2              8    period::8:treat #> 17  7.0979736  3.9704919 10.2254553  8.9  1              9    period::9:treat #> 18  2.4385390 -0.2928821  5.1699601  9.1  2              9    period::9:treat #> 19  9.5453455  6.3977727 12.6929184  9.9  1             10   period::10:treat #> 20  3.6267443  0.6409795  6.6125091 10.1  2             10   period::10:treat #>    is_ref          y #> 1   FALSE  1.4239576 #> 2   FALSE -4.1291547 #> 3   FALSE  1.6931989 #> 4   FALSE -4.1353019 #> 5   FALSE  3.0439521 #> 6   FALSE -3.4897091 #> 7   FALSE -0.8667871 #> 8   FALSE -2.6458897 #> 9    TRUE  0.0000000 #> 10   TRUE  0.0000000 #> 11  FALSE  3.8181620 #> 12  FALSE -2.2626440 #> 13  FALSE  5.1642678 #> 14  FALSE  2.0828305 #> 15  FALSE  5.2338735 #> 16  FALSE  2.4826394 #> 17  FALSE  7.0979736 #> 18  FALSE  2.4385390 #> 19  FALSE  9.5453455 #> 20  FALSE  3.6267443 #>  #> $is_iplot #> [1] TRUE #>  #> $at #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $labels #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  iplot_data(est_split)                # The wrapper provided by this package #>                              id   estimate     ci_low    ci_high  x #> 1  sample.var: id%%2; sample: 0  1.4239576 -1.2422952  4.0902104  1 #> 2  sample.var: id%%2; sample: 0  1.6931989 -1.1310149  4.5174127  2 #> 3  sample.var: id%%2; sample: 0  3.0439521  0.3506812  5.7372230  3 #> 4  sample.var: id%%2; sample: 0 -0.8667871 -3.8315352  2.0979611  4 #> 5  sample.var: id%%2; sample: 0  0.0000000  0.0000000  0.0000000  5 #> 6  sample.var: id%%2; sample: 0  3.8181620  0.9644230  6.6719010  6 #> 7  sample.var: id%%2; sample: 0  5.1642678  2.1084814  8.2200543  7 #> 8  sample.var: id%%2; sample: 0  5.2338735  2.0448159  8.4229311  8 #> 9  sample.var: id%%2; sample: 0  7.0979736  3.9704919 10.2254553  9 #> 10 sample.var: id%%2; sample: 0  9.5453455  6.3977727 12.6929184 10 #> 11 sample.var: id%%2; sample: 1 -4.1291547 -7.3973098 -0.8609996  1 #> 12 sample.var: id%%2; sample: 1 -4.1353019 -7.2460773 -1.0245265  2 #> 13 sample.var: id%%2; sample: 1 -3.4897091 -6.5504723 -0.4289459  3 #> 14 sample.var: id%%2; sample: 1 -2.6458897 -5.7093088  0.4175294  4 #> 15 sample.var: id%%2; sample: 1  0.0000000  0.0000000  0.0000000  5 #> 16 sample.var: id%%2; sample: 1 -2.2626440 -4.9448774  0.4195895  6 #> 17 sample.var: id%%2; sample: 1  2.0828305 -0.9816140  5.1472751  7 #> 18 sample.var: id%%2; sample: 1  2.4826394 -1.2053985  6.1706773  8 #> 19 sample.var: id%%2; sample: 1  2.4385390 -0.2928821  5.1699601  9 #> 20 sample.var: id%%2; sample: 1  3.6267443  0.6409795  6.6125091 10 #>    estimate_names estimate_names_raw is_ref          y lhs sample ci_level #> 1               1    period::1:treat  FALSE  1.4239576   y      0     0.95 #> 2               2    period::2:treat  FALSE  1.6931989   y      0     0.95 #> 3               3    period::3:treat  FALSE  3.0439521   y      0     0.95 #> 4               4    period::4:treat  FALSE -0.8667871   y      0     0.95 #> 5               5    period::5:treat   TRUE  0.0000000   y      0     0.95 #> 6               6    period::6:treat  FALSE  3.8181620   y      0     0.95 #> 7               7    period::7:treat  FALSE  5.1642678   y      0     0.95 #> 8               8    period::8:treat  FALSE  5.2338735   y      0     0.95 #> 9               9    period::9:treat  FALSE  7.0979736   y      0     0.95 #> 10             10   period::10:treat  FALSE  9.5453455   y      0     0.95 #> 11              1    period::1:treat  FALSE -4.1291547   y      1     0.95 #> 12              2    period::2:treat  FALSE -4.1353019   y      1     0.95 #> 13              3    period::3:treat  FALSE -3.4897091   y      1     0.95 #> 14              4    period::4:treat  FALSE -2.6458897   y      1     0.95 #> 15              5    period::5:treat   TRUE  0.0000000   y      1     0.95 #> 16              6    period::6:treat  FALSE -2.2626440   y      1     0.95 #> 17              7    period::7:treat  FALSE  2.0828305   y      1     0.95 #> 18              8    period::8:treat  FALSE  2.4826394   y      1     0.95 #> 19              9    period::9:treat  FALSE  2.4385390   y      1     0.95 #> 20             10   period::10:treat  FALSE  3.6267443   y      1     0.95"},{"path":[]},{"path":"http://grantmcdermott.com/ggiplot/news/index.html","id":"new-features-0-0-1-9009","dir":"Changelog","previous_headings":"","what":"New features","title":"ggiplot 0.0.1.9009 (development version)","text":"Support keep drop arguments subsetting coefficients (#22).","code":""},{"path":"http://grantmcdermott.com/ggiplot/news/index.html","id":"bug-fixes-and-breaking-changes-0-0-1-9009","dir":"Changelog","previous_headings":"","what":"Bug fixes and breaking changes","title":"ggiplot 0.0.1.9009 (development version)","text":"Fix naming mismatch multiple estimation different time periods (#10). Thanks @brockmwilson. Slight tweak default theme, now uses dotted grid lines closely match iplot() (#e5cf0b0). Correctly parse formula-transformed dependent variable names, e.g. log(y (#20).","code":""},{"path":"http://grantmcdermott.com/ggiplot/news/index.html","id":"internals-0-0-1-9009","dir":"Changelog","previous_headings":"","what":"Internals","title":"ggiplot 0.0.1.9009 (development version)","text":"Add (visual) test suite (#12 several increments thereafter). Thanks @vincentarelbundock tinyviztest tinysnapshot! Switch marginaleffects::hypotheses() internally aggr_es() match upstream changes marginaleffects. Simplify multi_fixest object parsing (#19). Minor documentation improvements.","code":""},{"path":"http://grantmcdermott.com/ggiplot/news/index.html","id":"ggiplot-001","dir":"Changelog","previous_headings":"","what":"ggiplot 0.0.1","title":"ggiplot 0.0.1","text":"Tweaks plot output, including integer breaks x-axis (appropriate) allow additional user-level control (e.g. CI alpha width levels) Support multiple confidence levels (#2, #5) Support multiple LHS variables (#1) Added NEWS.md file track changes package.","code":""}]
